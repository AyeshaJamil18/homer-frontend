{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\src\\\\views\\\\Dashboard\\\\components\\\\UploadCard\\\\UploadCard.js\";\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Button, Card, CardContent, Grid, Snackbar, Typography } from '@material-ui/core';\nimport { Cloud, Save } from '@material-ui/icons';\nimport { CSVReader } from 'react-papaparse';\nimport { useHistory } from 'react-router-dom';\nimport MutexPromise from 'mutex-promise';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport CloudFilePicker from './CloudFilePicker';\nimport Overlay from '../../../Overlay';\nimport KloudlessService from '../../../../service/KloudlessService';\nimport DexieService from '../../../../service/DexieService';\nimport CSVParserService from '../../../../service/ParsingService/CSVParserService';\nimport { SnackBarWrapper } from '../../../../components';\nconst mutex = new MutexPromise('cloudProviderMutex');\nlet cloudPickerActive = false;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  title: {\n    fontWeight: 700\n  },\n  chartContainer: {\n    position: 'relative',\n    height: 'auto'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  },\n  button: {\n    margin: theme.spacing(0.5),\n    alignSelf: 'stretch',\n    variant: 'success'\n  },\n  input: {\n    display: 'none'\n  },\n  rowContainer: {\n    flex: 2,\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  }\n}));\n\nconst UploadCard = props => {\n  const className = props.className,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  let history = useHistory();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        openErrorSnackbar = _React$useState2[0],\n        setOpenErrorSuccessSnackBar = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        errorSnackBarMessage = _React$useState4[0],\n        setErrorSnackBarMessage = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        openSuccessSnackBar = _React$useState6[0],\n        setOpenSuccessSnackBar = _React$useState6[1];\n\n  const _React$useState7 = React.useState(''),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        successSnackBarMessage = _React$useState8[0],\n        setSuccessSnackBarMessage = _React$useState8[1];\n\n  const _React$useState9 = React.useState(false),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        overlayActive = _React$useState10[0],\n        setOverlayActive = _React$useState10[1];\n\n  const _React$useState11 = React.useState('Loading'),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        overlayText = _React$useState12[0],\n        setOverlayText = _React$useState12[1];\n\n  const _React$useState13 = React.useState(false),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        kloudlessPickerAssigned = _React$useState14[0],\n        setKloudlessPickerAssigned = _React$useState14[1];\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const fileInput = React.createRef();\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  const FILE_SIZE_LIMIT = process.env.REACT_APP_FILE_SIZE_LIMIT || 10000000;\n  const COLUMN_COUNT_LIMIT = process.env.REACT_APP_FILE_COLUMN_COUNT_LIMIT || 50;\n\n  const handleCloseErrorSnackBar = () => {\n    setErrorSnackBarMessage('');\n    setOpenErrorSuccessSnackBar(false);\n  };\n\n  const handleCloseSuccessSnackBar = () => {\n    setSuccessSnackBarMessage('');\n    setOpenSuccessSnackBar(false);\n  };\n\n  const handleReadCSV = async data => {\n    const fileName = fileInput.current.files[0].name;\n\n    if (fileName.slice(-4) !== '.csv') {\n      setErrorSnackBarMessage('File type must be csv');\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    }\n\n    if (fileInput.current.files[0].size > FILE_SIZE_LIMIT) {\n      setErrorSnackBarMessage('File size must be smaller than 10MB');\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    }\n\n    if (fileInput.current.files[0].size === 0) {\n      setErrorSnackBarMessage('File size must be greater than 0');\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    }\n\n    if (data.meta.fields.length > COLUMN_COUNT_LIMIT) {\n      setErrorSnackBarMessage('Column size must be smaller than ' + COLUMN_COUNT_LIMIT);\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    }\n\n    setOverlayActive(true);\n    setSuccessSnackBarMessage('Parsing file ' + fileName);\n    setOpenSuccessSnackBar(true); // Wait half a second so messages are displayed properly\n\n    await new Promise(resolve => setTimeout(resolve, 500, 500));\n    const result = CSVParserService.convertToDocumentObj(data);\n    result.fileName = fileName;\n    setOverlayActive(false);\n    forwardToEditorWithData(result);\n  };\n\n  const forwardToEditorWithData = data => {\n    // Convert object to array\n    data.data = Object.values(data.data); //store data\n\n    DexieService.flushDocumentDb().then(() => DexieService.addDocument(data).then(id => history.push({\n      pathname: '/editor',\n      state: {\n        dexieDocumentId: id\n        /*\r\n        columns: data.headers,\r\n        columnsData: Object.values(data.data),\r\n        fileName: data.fileName,\r\n        id: 0*/\n\n      }\n    })));\n  };\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log('fileError');\n    console.log(err);\n  };\n\n  const handleImportOffer = () => {\n    fileInput.current.click(); //console.log(fileInput);\n  };\n\n  const handleCloudFilePickerSuccess = async files => {\n    setOverlayActive(true); // Check file first\n\n    const myFile = files[0];\n\n    if (myFile.size > FILE_SIZE_LIMIT) {\n      setOverlayActive(false);\n      setErrorSnackBarMessage('File size must be smaller than 10MB');\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    } else if (myFile.mime_type !== 'text/csv') {\n      setOverlayActive(false);\n      setErrorSnackBarMessage('File type must be csv');\n      setOpenErrorSuccessSnackBar(true);\n      return;\n    }\n\n    setSuccessSnackBarMessage('Requested file ' + myFile.name + ' from server');\n    setOpenSuccessSnackBar(true); // Sometimes the picker submits multiple times\n    // Always does when uploading one document, then going back with backspace and then uploading another document\n\n    mutex.lock();\n\n    if (cloudPickerActive) {\n      return;\n    } else {\n      cloudPickerActive = true;\n    }\n\n    mutex.unlock();\n\n    if (myFile) {\n      KloudlessService.getFileFromKloudlessAndStore(myFile.account, myFile.id).then(name => {\n        const csvData = CSVParserService.readFromKloudlessToCsv(name);\n        /*if (csvData.meta.fields.length > COLUMN_COUNT_LIMIT) {\r\n            setOverlayActive(false);\r\n               // sadly this often is not displayed on the frontend\r\n               // the Kloudless picker fires multiple times.\r\n               // Only at the first time, the correct references to the overlay and the error\r\n               // are set correctly. Following executions have stale references which do not\r\n               // change the view of the front end\r\n            setErrorMessage('Column size must be smaller than '\r\n                + COLUMN_COUNT_LIMIT);\r\n            setOpenError(true);\r\n            return;\r\n        }*/\n\n        const result = CSVParserService.convertToDocumentObj(csvData);\n        result.fileName = myFile.name;\n        setOverlayActive(false);\n        forwardToEditorWithData(result);\n        cloudPickerActive = false;\n      }).catch(myError => {\n        setErrorSnackBarMessage(myError);\n        setOpenErrorSuccessSnackBar(true);\n        setOverlayActive(false);\n        console.log(myError);\n        cloudPickerActive = false;\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!kloudlessPickerAssigned) {\n      // prevent this from firing multiply times\n      CloudFilePicker.choosify(document.getElementById('upload-cloud-btn'));\n      CloudFilePicker.on('success', handleCloudFilePickerSuccess);\n      setKloudlessPickerAssigned(true);\n    }\n  }, []); // only execute once -> [] no dependencies\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 4000,\n    onClose: handleCloseErrorSnackBar,\n    open: openErrorSnackbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(SnackBarWrapper, {\n    message: errorSnackBarMessage,\n    onClose: handleCloseErrorSnackBar,\n    variant: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  })), React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 6000,\n    onClose: handleCloseSuccessSnackBar,\n    open: openSuccessSnackBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, React.createElement(SnackBarWrapper, {\n    message: successSnackBarMessage,\n    onClose: handleCloseSuccessSnackBar,\n    variant: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  })), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, React.createElement(Overlay, {\n    active: overlayActive,\n    text: overlayText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, \"FILE UPLOAD\"))), React.createElement(CSVReader, {\n    configOptions: {\n      header: true\n    },\n    inputRef: fileInput,\n    onError: handleOnError,\n    onFileLoaded: handleReadCSV,\n    style: {\n      display: 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    \"aria-label\": \"outlined primary button group\",\n    className: \"d-flex\",\n    color: \"primary\",\n    size: \"small\",\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.button,\n    component: \"span\",\n    endIcon: React.createElement(Save, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }),\n    id: \"upload-local-btn\",\n    onClick: handleImportOffer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, \"Local Upload\"), React.createElement(Button, {\n    className: classes.button,\n    component: \"span\",\n    endIcon: React.createElement(Cloud, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }),\n    id: \"upload-cloud-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, \"Cloud Upload\")))));\n};\n\nUploadCard.propTypes = {\n  className: PropTypes.string,\n  history: PropTypes.object\n};\nexport default UploadCard;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/views/Dashboard/components/UploadCard/UploadCard.js"],"names":["React","useEffect","clsx","PropTypes","makeStyles","useTheme","Button","Card","CardContent","Grid","Snackbar","Typography","Cloud","Save","CSVReader","useHistory","MutexPromise","ButtonGroup","CloudFilePicker","Overlay","KloudlessService","DexieService","CSVParserService","SnackBarWrapper","mutex","cloudPickerActive","useStyles","theme","root","height","title","fontWeight","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","button","margin","alignSelf","variant","input","rowContainer","flex","flexDirection","UploadCard","props","className","rest","history","useState","openErrorSnackbar","setOpenErrorSuccessSnackBar","errorSnackBarMessage","setErrorSnackBarMessage","openSuccessSnackBar","setOpenSuccessSnackBar","successSnackBarMessage","setSuccessSnackBarMessage","overlayActive","setOverlayActive","overlayText","setOverlayText","kloudlessPickerAssigned","setKloudlessPickerAssigned","classes","fileInput","createRef","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","borderWidth","borderColor","divider","backgroundColor","white","titleFontColor","text","primary","bodyFontColor","secondary","footerFontColor","FILE_SIZE_LIMIT","process","env","REACT_APP_FILE_SIZE_LIMIT","COLUMN_COUNT_LIMIT","REACT_APP_FILE_COLUMN_COUNT_LIMIT","handleCloseErrorSnackBar","handleCloseSuccessSnackBar","handleReadCSV","data","fileName","current","files","name","slice","size","meta","fields","length","Promise","resolve","setTimeout","result","convertToDocumentObj","forwardToEditorWithData","Object","values","flushDocumentDb","then","addDocument","id","push","pathname","state","dexieDocumentId","handleOnError","err","file","inputElem","reason","console","log","handleImportOffer","click","handleCloudFilePickerSuccess","myFile","mime_type","lock","unlock","getFileFromKloudlessAndStore","account","csvData","readFromKloudlessToCsv","catch","myError","choosify","document","getElementById","on","vertical","horizontal","header","propTypes","string","object"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Button, Card, CardContent, Grid, Snackbar, Typography } from '@material-ui/core';\r\nimport { Cloud, Save } from '@material-ui/icons';\r\n\r\nimport { CSVReader } from 'react-papaparse';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport MutexPromise from 'mutex-promise';\r\n\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport CloudFilePicker from './CloudFilePicker';\r\nimport Overlay from '../../../Overlay';\r\nimport KloudlessService from '../../../../service/KloudlessService';\r\nimport DexieService from '../../../../service/DexieService';\r\nimport CSVParserService from '../../../../service/ParsingService/CSVParserService';\r\n\r\nimport { SnackBarWrapper } from '../../../../components';\r\n\r\nconst mutex = new MutexPromise('cloudProviderMutex');\r\nlet cloudPickerActive = false;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%'\r\n    },\r\n    title: {\r\n        fontWeight: 700\r\n    },\r\n    chartContainer: {\r\n        position: 'relative',\r\n        height: 'auto'\r\n    },\r\n    stats: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    device: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(1)\r\n    },\r\n    deviceIcon: {\r\n        color: theme.palette.icon\r\n    },\r\n    button: {\r\n        margin: theme.spacing(0.5),\r\n        alignSelf: 'stretch',\r\n        variant: 'success'\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    rowContainer: {\r\n        flex: 2,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around'\r\n    }\r\n}));\r\n\r\n\r\nconst UploadCard = props => {\r\n    const { className, ...rest } = props;\r\n\r\n    let history = useHistory();\r\n    const [openErrorSnackbar, setOpenErrorSuccessSnackBar] = React.useState(false);\r\n    const [errorSnackBarMessage, setErrorSnackBarMessage] = React.useState('');\r\n\r\n    const [openSuccessSnackBar, setOpenSuccessSnackBar] = React.useState(false);\r\n    const [successSnackBarMessage, setSuccessSnackBarMessage] = React.useState('');\r\n\r\n    const [overlayActive, setOverlayActive] = React.useState(false);\r\n    const [overlayText, setOverlayText] = React.useState('Loading');\r\n\r\n    const [kloudlessPickerAssigned, setKloudlessPickerAssigned] = React.useState(false);\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const fileInput = React.createRef();\r\n\r\n    const options = {\r\n        legend: {\r\n            display: false\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        tooltips: {\r\n            enabled: true,\r\n            mode: 'index',\r\n            intersect: false,\r\n            borderWidth: 1,\r\n            borderColor: theme.palette.divider,\r\n            backgroundColor: theme.palette.white,\r\n            titleFontColor: theme.palette.text.primary,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            footerFontColor: theme.palette.text.secondary\r\n        }\r\n    };\r\n\r\n    const FILE_SIZE_LIMIT = process.env.REACT_APP_FILE_SIZE_LIMIT || 10000000;\r\n    const COLUMN_COUNT_LIMIT = process.env.REACT_APP_FILE_COLUMN_COUNT_LIMIT || 50;\r\n\r\n    const handleCloseErrorSnackBar = () => {\r\n        setErrorSnackBarMessage('');\r\n        setOpenErrorSuccessSnackBar(false);\r\n    };\r\n\r\n    const handleCloseSuccessSnackBar = () => {\r\n        setSuccessSnackBarMessage('');\r\n        setOpenSuccessSnackBar(false);\r\n    };\r\n\r\n    const handleReadCSV = async (data) => {\r\n        const fileName = fileInput.current.files[0].name;\r\n\r\n        if (fileName.slice(-4) !== '.csv') {\r\n            setErrorSnackBarMessage('File type must be csv');\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        }\r\n        if (fileInput.current.files[0].size > FILE_SIZE_LIMIT) {\r\n            setErrorSnackBarMessage('File size must be smaller than 10MB');\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        }\r\n        if (fileInput.current.files[0].size === 0) {\r\n            setErrorSnackBarMessage('File size must be greater than 0');\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        }\r\n        if (data.meta.fields.length > COLUMN_COUNT_LIMIT) {\r\n            setErrorSnackBarMessage('Column size must be smaller than '\r\n                + COLUMN_COUNT_LIMIT);\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        }\r\n\r\n        setOverlayActive(true);\r\n\r\n        setSuccessSnackBarMessage('Parsing file ' + fileName);\r\n        setOpenSuccessSnackBar(true);\r\n\r\n        // Wait half a second so messages are displayed properly\r\n        await new Promise(resolve => setTimeout(resolve, 500, 500));\r\n\r\n        const result = CSVParserService.convertToDocumentObj(data);\r\n        result.fileName = fileName;\r\n\r\n        setOverlayActive(false);\r\n        forwardToEditorWithData(result);\r\n    };\r\n\r\n    const forwardToEditorWithData = (data) => {\r\n        // Convert object to array\r\n        data.data = Object.values(data.data);\r\n\r\n        //store data\r\n        DexieService.flushDocumentDb()\r\n            .then(() => DexieService.addDocument(data).then(id => history.push({\r\n                pathname: '/editor',\r\n                state: {\r\n                    dexieDocumentId: id\r\n                    /*\r\n                    columns: data.headers,\r\n                    columnsData: Object.values(data.data),\r\n                    fileName: data.fileName,\r\n                    id: 0*/\r\n                }\r\n            })));\r\n    };\r\n\r\n    const handleOnError = (err, file, inputElem, reason) => {\r\n        console.log('fileError');\r\n        console.log(err);\r\n    };\r\n\r\n    const handleImportOffer = () => {\r\n        fileInput.current.click();\r\n        //console.log(fileInput);\r\n    };\r\n\r\n    const handleCloudFilePickerSuccess = async (files) => {\r\n        setOverlayActive(true);\r\n\r\n        // Check file first\r\n        const myFile = files[0];\r\n        if (myFile.size > FILE_SIZE_LIMIT) {\r\n            setOverlayActive(false);\r\n            setErrorSnackBarMessage('File size must be smaller than 10MB');\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        } else if (myFile.mime_type !== 'text/csv') {\r\n            setOverlayActive(false);\r\n            setErrorSnackBarMessage('File type must be csv');\r\n            setOpenErrorSuccessSnackBar(true);\r\n            return;\r\n        }\r\n\r\n        setSuccessSnackBarMessage('Requested file ' + myFile.name + ' from server');\r\n        setOpenSuccessSnackBar(true);\r\n\r\n        // Sometimes the picker submits multiple times\r\n        // Always does when uploading one document, then going back with backspace and then uploading another document\r\n        mutex.lock();\r\n        if (cloudPickerActive) {\r\n            return;\r\n        } else {\r\n            cloudPickerActive = true;\r\n        }\r\n        mutex.unlock();\r\n\r\n        if (myFile) {\r\n            KloudlessService.getFileFromKloudlessAndStore(myFile.account, myFile.id)\r\n                .then(name => {\r\n                    const csvData = CSVParserService.readFromKloudlessToCsv(name);\r\n\r\n                    /*if (csvData.meta.fields.length > COLUMN_COUNT_LIMIT) {\r\n                        setOverlayActive(false);\r\n                           // sadly this often is not displayed on the frontend\r\n                           // the Kloudless picker fires multiple times.\r\n                           // Only at the first time, the correct references to the overlay and the error\r\n                           // are set correctly. Following executions have stale references which do not\r\n                           // change the view of the front end\r\n                        setErrorMessage('Column size must be smaller than '\r\n                            + COLUMN_COUNT_LIMIT);\r\n                        setOpenError(true);\r\n                        return;\r\n                    }*/\r\n\r\n\r\n                    const result = CSVParserService.convertToDocumentObj(csvData);\r\n                    result.fileName = myFile.name;\r\n\r\n                    setOverlayActive(false);\r\n                    forwardToEditorWithData(result);\r\n\r\n                    cloudPickerActive = false;\r\n                })\r\n                .catch(myError => {\r\n                    setErrorSnackBarMessage(myError);\r\n                    setOpenErrorSuccessSnackBar(true);\r\n\r\n                    setOverlayActive(false);\r\n\r\n                    console.log(myError);\r\n                    cloudPickerActive = false;\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!kloudlessPickerAssigned) { // prevent this from firing multiply times\r\n            CloudFilePicker.choosify(document.getElementById('upload-cloud-btn'));\r\n            CloudFilePicker.on('success', handleCloudFilePickerSuccess);\r\n\r\n            setKloudlessPickerAssigned(true);\r\n        }\r\n    }, []); // only execute once -> [] no dependencies\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center'\r\n                }}\r\n                autoHideDuration={4000}\r\n                onClose={handleCloseErrorSnackBar}\r\n                open={openErrorSnackbar}\r\n            >\r\n                <SnackBarWrapper\r\n                    message={errorSnackBarMessage}\r\n                    onClose={handleCloseErrorSnackBar}\r\n                    variant=\"error\"\r\n                />\r\n            </Snackbar>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center'\r\n                }}\r\n                autoHideDuration={6000}\r\n                onClose={handleCloseSuccessSnackBar}\r\n                open={openSuccessSnackBar}\r\n            >\r\n                <SnackBarWrapper\r\n                    message={successSnackBarMessage}\r\n                    onClose={handleCloseSuccessSnackBar}\r\n                    variant=\"success\"\r\n                />\r\n            </Snackbar>\r\n\r\n\r\n            <CardContent>\r\n                <Overlay\r\n                    active={overlayActive}\r\n                    text={overlayText}\r\n                />\r\n                <Grid\r\n                    container\r\n                    justify=\"space-between\"\r\n                >\r\n                    <Grid item>\r\n                        <Typography\r\n                            className={classes.title}\r\n                            color=\"textSecondary\"\r\n                            gutterBottom\r\n                            variant=\"body2\"\r\n                        >\r\n                            FILE UPLOAD\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <CSVReader\r\n                    configOptions={{ header: true }}\r\n                    inputRef={fileInput}\r\n                    onError={handleOnError}\r\n                    onFileLoaded={handleReadCSV}\r\n                    style={{ display: 'none' }}\r\n                />\r\n                <Grid\r\n                    container\r\n                    justify=\"space-between\"\r\n                >\r\n                    <ButtonGroup\r\n                        aria-label=\"outlined primary button group\"\r\n                        className=\"d-flex\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                    >\r\n                        <Button\r\n                            className={classes.button}\r\n                            component=\"span\"\r\n                            endIcon={<Save/>}\r\n                            id=\"upload-local-btn\"\r\n                            onClick={handleImportOffer}\r\n                        >Local Upload</Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            component=\"span\"\r\n                            endIcon={<Cloud/>}\r\n                            id=\"upload-cloud-btn\"\r\n                        >Cloud Upload</Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nUploadCard.propTypes = {\r\n    className: PropTypes.string,\r\n    history: PropTypes.object\r\n};\r\n\r\nexport default UploadCard;\r\n"]},"metadata":{},"sourceType":"module"}