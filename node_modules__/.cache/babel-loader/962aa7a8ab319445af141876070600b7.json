{"ast":null,"code":"import AbstractAnonymizationService from '../AbstractAnonymizationService';\nimport AnonymizationAssignment from '../AnonymizationAssignment';\n/**\r\n * Randomizes the sorting of the cells of a given column\r\n */\n\nclass RandomAnonymizationService extends AbstractAnonymizationService {}\n\nRandomAnonymizationService.apply = (assignment, document) => {\n  const columnId = AbstractAnonymizationService.getColumnIdByOrderId.call(RandomAnonymizationService, assignment.columnOrderId, document);\n  RandomAnonymizationService.shuffleArray(document.data[columnId].data);\n};\n\nRandomAnonymizationService.getDescription = options => 'randomized';\n\nRandomAnonymizationService.getName = () => 'random';\n\nRandomAnonymizationService.shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n};\n\nexport default RandomAnonymizationService;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/Anonymization/AnonymizationImplementation/RandomAnonymizationService.js"],"names":["AbstractAnonymizationService","AnonymizationAssignment","RandomAnonymizationService","apply","assignment","document","columnId","getColumnIdByOrderId","columnOrderId","shuffleArray","data","getDescription","options","getName","array","i","length","j","Math","floor","random"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AAEA;;;;AAGA,MAAMC,0BAAN,SAAyCF,4BAAzC,CAAsE;;AAAhEE,0B,CACKC,K,GAAQ,CAACC,UAAD,EAAsCC,QAAtC,KAAyD;AACpE,QAAMC,QAAQ,GAFmBN,4BAEnB,CAASO,oBAAT,MAFhBL,0BAEgB,EAA8BE,UAAU,CAACI,aAAzC,EAAwDH,QAAxD,CAAd;AACAH,EAAAA,0BAA0B,CAACO,YAA3B,CAAwCJ,QAAQ,CAACK,IAAT,CAAcJ,QAAd,EAAwBI,IAAhE;AACH,C;;AAJCR,0B,CAMKS,c,GAAkBC,OAAD,IAAqB,Y;;AAN3CV,0B,CAQKW,O,GAAU,MAAc,Q;;AAR7BX,0B,CAUKO,Y,GAAgBK,KAAD,IAAiB;AACnC,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,UAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AADuC,eAEhB,CAACD,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAFgB;AAEtCD,IAAAA,KAAK,CAACC,CAAD,CAFiC;AAE5BD,IAAAA,KAAK,CAACG,CAAD,CAFuB;AAG1C;AACJ,C;;AAGL,eAAef,0BAAf","sourcesContent":["import AbstractAnonymizationService from '../AbstractAnonymizationService';\r\nimport AnonymizationAssignment from '../AnonymizationAssignment';\r\n\r\n/**\r\n * Randomizes the sorting of the cells of a given column\r\n */\r\nclass RandomAnonymizationService extends AbstractAnonymizationService {\r\n    static apply = (assignment: AnonymizationAssignment, document): void => {\r\n        const columnId = super.getColumnIdByOrderId(assignment.columnOrderId, document);\r\n        RandomAnonymizationService.shuffleArray(document.data[columnId].data);\r\n    };\r\n\r\n    static getDescription = (options): String => 'randomized';\r\n\r\n    static getName = (): String => 'random';\r\n\r\n    static shuffleArray = (array): void => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    };\r\n}\r\n\r\nexport default RandomAnonymizationService;\r\n"]},"metadata":{},"sourceType":"module"}