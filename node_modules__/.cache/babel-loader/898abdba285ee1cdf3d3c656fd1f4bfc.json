{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\src\\\\views\\\\Dashboard\\\\components\\\\UploadCard\\\\UploadCard.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Button, Card, CardContent, CardHeader, Divider, IconButton, Snackbar } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { CSVReader } from 'react-papaparse';\nimport { useHistory } from 'react-router-dom';\nimport { SnackBarWrapper } from 'components';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '150px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  },\n  button: {\n    margin: theme.spacing(5)\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nconst UploadCard = props => {\n  const className = props.className,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  let history = useHistory();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        openError = _React$useState2[0],\n        setOpenError = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        errorMessage = _React$useState4[0],\n        setErrorMessage = _React$useState4[1];\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const fileInput = React.createRef();\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  const FILE_SIZE_LIMIT = process.env.REACT_APP_FILE_SIZE_LIMIT || 10000000;\n  const COLUMN_COUNT_LIMIT = process.env.REACT_APP_FILE_COLUMN_COUNT_LIMIT || 50;\n\n  const handleCloseSnackBar = () => {\n    setErrorMessage('');\n    setOpenError(false);\n  };\n\n  const handleReadCSV = data => {\n    if (fileInput.current.files[0].type !== 'text/csv' && !(fileInput.current.files[0].type === 'application/vnd.ms-excel' && fileInput.current.files[0].name.slice(-4) === '.csv')) {\n      setErrorMessage('File type must be csv');\n      setOpenError(true);\n      return;\n    }\n\n    if (fileInput.current.files[0].size > FILE_SIZE_LIMIT) {\n      setErrorMessage('File size must be smaller than 10MB');\n      setOpenError(true);\n      return;\n    }\n\n    if (fileInput.current.files[0].size == 0) {\n      setErrorMessage('File size must be greater than 0');\n      setOpenError(true);\n      return;\n    }\n\n    if (data.meta.fields.length > 50) {\n      setErrorMessage('Column size must be smaller than 50');\n      setOpenError(true);\n      return;\n    }\n\n    let columnHeaders = data.meta.fields;\n    let columnHeadersObject = columnHeaders.map((column, index) => {\n      return {\n        title: column,\n        orderPosition: index,\n        data: []\n      };\n    }).reduce((obj, item) => {\n      obj[item.title] = item;\n      return obj;\n    }, {});\n    data.data.forEach(row => {\n      Object.keys(columnHeadersObject).forEach(column => columnHeadersObject[column].data.push(row[column]));\n    });\n    history.push({\n      pathname: '/editor',\n      state: {\n        columns: columnHeaders,\n        columnsData: Object.values(columnHeadersObject),\n        fileName: fileInput.current.files[0].name\n      }\n    });\n  };\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log('fileError');\n    console.log(err);\n  };\n\n  const handleImportOffer = () => {\n    fileInput.current.click(); //console.log(fileInput);\n  };\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 4000,\n    onClose: handleCloseSnackBar,\n    open: openError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(SnackBarWrapper, {\n    message: errorMessage,\n    onClose: handleCloseSnackBar,\n    variant: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })), React.createElement(CardHeader, {\n    action: React.createElement(IconButton, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(RefreshIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })),\n    title: \"Upload instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \" You can upload your dataset by clicking the upload button and then you can begin to customize/anonymize your dataset\"), React.createElement(CSVReader, {\n    configOptions: {\n      header: true\n    },\n    inputRef: fileInput,\n    onError: handleOnError,\n    onFileLoaded: handleReadCSV,\n    style: {\n      display: 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.button,\n    component: \"span\",\n    onClick: handleImportOffer,\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Upload\")))));\n};\n\nUploadCard.propTypes = {\n  className: PropTypes.string,\n  history: PropTypes.object\n};\nexport default UploadCard;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/views/Dashboard/components/UploadCard/UploadCard.js"],"names":["React","clsx","PropTypes","makeStyles","useTheme","Button","Card","CardContent","CardHeader","Divider","IconButton","Snackbar","RefreshIcon","CSVReader","useHistory","SnackBarWrapper","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","button","margin","input","UploadCard","props","className","rest","history","useState","openError","setOpenError","errorMessage","setErrorMessage","classes","fileInput","createRef","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","borderWidth","borderColor","divider","backgroundColor","white","titleFontColor","text","primary","bodyFontColor","secondary","footerFontColor","FILE_SIZE_LIMIT","process","env","REACT_APP_FILE_SIZE_LIMIT","COLUMN_COUNT_LIMIT","REACT_APP_FILE_COLUMN_COUNT_LIMIT","handleCloseSnackBar","handleReadCSV","data","current","files","type","name","slice","size","meta","fields","length","columnHeaders","columnHeadersObject","map","column","index","title","orderPosition","reduce","obj","item","forEach","row","Object","keys","push","pathname","state","columns","columnsData","values","fileName","handleOnError","err","file","inputElem","reason","console","log","handleImportOffer","click","vertical","horizontal","header","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Button, Card, CardContent, CardHeader, Divider, IconButton, Snackbar } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport { CSVReader } from 'react-papaparse';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SnackBarWrapper } from 'components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%'\r\n    },\r\n    chartContainer: {\r\n        position: 'relative',\r\n        height: '150px'\r\n    },\r\n    stats: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    device: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(1)\r\n    },\r\n    deviceIcon: {\r\n        color: theme.palette.icon\r\n    },\r\n    button: {\r\n        margin: theme.spacing(5)\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\n\r\nconst UploadCard = props => {\r\n    const { className, ...rest } = props;\r\n\r\n    let history = useHistory();\r\n    const [openError, setOpenError] = React.useState(false);\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const fileInput = React.createRef();\r\n\r\n    const options = {\r\n        legend: {\r\n            display: false\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        tooltips: {\r\n            enabled: true,\r\n            mode: 'index',\r\n            intersect: false,\r\n            borderWidth: 1,\r\n            borderColor: theme.palette.divider,\r\n            backgroundColor: theme.palette.white,\r\n            titleFontColor: theme.palette.text.primary,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            footerFontColor: theme.palette.text.secondary\r\n        }\r\n    };\r\n\r\n    const FILE_SIZE_LIMIT = process.env.REACT_APP_FILE_SIZE_LIMIT || 10000000;\r\n    const COLUMN_COUNT_LIMIT = process.env.REACT_APP_FILE_COLUMN_COUNT_LIMIT || 50;\r\n\r\n    const handleCloseSnackBar = () => {\r\n        setErrorMessage('');\r\n        setOpenError(false);\r\n    };\r\n\r\n    const handleReadCSV = (data) => {\r\n        if (fileInput.current.files[0].type !== 'text/csv' &&\r\n            !(fileInput.current.files[0].type === 'application/vnd.ms-excel' && fileInput.current.files[0].name.slice(-4) === '.csv')) {\r\n            setErrorMessage('File type must be csv');\r\n            setOpenError(true);\r\n            return;\r\n        }\r\n        if (fileInput.current.files[0].size > FILE_SIZE_LIMIT) {\r\n            setErrorMessage('File size must be smaller than 10MB');\r\n            setOpenError(true);\r\n            return;\r\n        }\r\n        if (fileInput.current.files[0].size == 0) {\r\n            setErrorMessage('File size must be greater than 0');\r\n            setOpenError(true);\r\n            return;\r\n        }\r\n        if (data.meta.fields.length > 50) {\r\n            setErrorMessage('Column size must be smaller than 50');\r\n            setOpenError(true);\r\n            return;\r\n        }\r\n\r\n        let columnHeaders = data.meta.fields;\r\n        let columnHeadersObject = columnHeaders.map((column, index) => {\r\n            return { title: column, orderPosition: index, data: [] };\r\n        })\r\n            .reduce((obj, item) => {\r\n                obj[item.title] = item;\r\n                return obj;\r\n            }, {});\r\n\r\n        data.data.forEach(row => {\r\n            Object.keys(columnHeadersObject).forEach(column => columnHeadersObject[column].data.push(row[column]));\r\n        });\r\n        history.push({\r\n            pathname: '/editor',\r\n            state: {\r\n                columns: columnHeaders,\r\n                columnsData: Object.values(columnHeadersObject),\r\n                fileName: fileInput.current.files[0].name\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleOnError = (err, file, inputElem, reason) => {\r\n        console.log('fileError');\r\n        console.log(err);\r\n    };\r\n\r\n    const handleImportOffer = () => {\r\n        fileInput.current.click();\r\n        //console.log(fileInput);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center'\r\n                }}\r\n                autoHideDuration={4000}\r\n                onClose={handleCloseSnackBar}\r\n                open={openError}\r\n            >\r\n                <SnackBarWrapper\r\n                    message={errorMessage}\r\n                    onClose={handleCloseSnackBar}\r\n                    variant=\"error\"\r\n                />\r\n            </Snackbar>\r\n            <CardHeader\r\n                action={\r\n                    <IconButton size=\"small\">\r\n                        <RefreshIcon/>\r\n                    </IconButton>\r\n                }\r\n                title=\"Upload instructions\"\r\n            />\r\n            <Divider/>\r\n            <CardContent>\r\n                <div className={classes.chartContainer}>\r\n                    <label> You can upload your dataset by clicking the upload button and then you can begin to\r\n                        customize/anonymize your dataset</label>\r\n                    {/* <input\r\n          accept=\".csv\"\r\n          className={classes.input}\r\n          id=\"contained-button-file\"\r\n          multiple\r\n          type=\"file\"\r\n        /> */}\r\n                    <CSVReader\r\n                        configOptions={{ header: true }}\r\n                        inputRef={fileInput}\r\n                        onError={handleOnError}\r\n                        onFileLoaded={handleReadCSV}\r\n                        style={{ display: 'none' }}\r\n                    />\r\n                    <label htmlFor=\"contained-button-file\">\r\n                        <Button\r\n                            className={classes.button}\r\n                            component=\"span\"\r\n                            onClick={handleImportOffer}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nUploadCard.propTypes = {\r\n    className: PropTypes.string,\r\n    history: PropTypes.object\r\n};\r\n\r\nexport default UploadCard;\r\n"]},"metadata":{},"sourceType":"module"}