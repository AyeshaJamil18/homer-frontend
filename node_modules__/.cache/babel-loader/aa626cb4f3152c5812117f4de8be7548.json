{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\src\\\\views\\\\MyDocumentList\\\\MyDocumentList.js\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { DocumentListTable, DocumentListToolbar } from './components';\nimport { DocumentService, AccessGroupService } from 'service';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  content: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst MyDocumentList = () => {\n  const classes = useStyles();\n  const privacyOptions = {\n    PUBLIC: 'public',\n    PRIVATE: 'private',\n    SHARED: 'shared'\n  };\n\n  const _useState = useState(privacyOptions.PRIVATE),\n        _useState2 = _slicedToArray(_useState, 2),\n        activeChip = _useState2[0],\n        setActiveChip = _useState2[1];\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        privateDocumentList = _React$useState2[0];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 1),\n        publicDocumentList = _React$useState4[0];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 1),\n        sharedDocumentList = _React$useState6[0];\n\n  const _React$useState7 = React.useState([]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        activeDocumentList = _React$useState8[0],\n        setActiveDocumentList = _React$useState8[1];\n\n  const _React$useState9 = React.useState({\n    'public': publicDocumentList,\n    'private': privateDocumentList,\n    'shared': sharedDocumentList\n  }),\n        _React$useState10 = _slicedToArray(_React$useState9, 1),\n        documentListMap = _React$useState10[0];\n\n  const changeActiveChip = myActiveChip => {\n    setActiveChip(myActiveChip);\n\n    if (myActiveChip == privacyOptions.PRIVATE) {\n      setActiveDocumentList(privateDocumentList);\n    } else if (myActiveChip == privacyOptions.SHARED) {\n      setActiveDocumentList(sharedDocumentList);\n    } else if (myActiveChip == privacyOptions.PUBLIC) {\n      setActiveDocumentList(publicDocumentList);\n    }\n  };\n\n  const putDocumentToAnotherList = (oldPrivacy, newPrivacy, document) => {\n    let oldList = documentListMap[oldPrivacy];\n    let newList = documentListMap[newPrivacy];\n    let oldIndex = oldList.findIndex(doc => doc.id === document.id);\n    oldList.splice(oldIndex, 1);\n    newList.push(document);\n  };\n\n  const deleteAccessModifierOfDocument = (documentId, modifier) => {\n    return AccessGroupService.deleteDocumentAccessGroupModifier(documentId, modifier);\n  };\n\n  const shareDocumentToNew = (oldPrivacy, newPrivacy, document, accessGroupObject) => {\n    if (newPrivacy === privacyOptions.PUBLIC) {\n      if (oldPrivacy === privacyOptions.PRIVATE) {\n        // private -> public\n        const body = {\n          private: false\n        };\n        return DocumentService.updateDocumentPrivacy(document.id, body).then(resp => resp.json()).then(data => {\n          putDocumentToAnotherList(oldPrivacy, newPrivacy, data.doc);\n          changeActiveChip(oldPrivacy);\n          return Promise.resolve(data.doc);\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      } else {\n        // shared -> public\n        let p1 = DocumentService.updateDocumentPrivacy(document.id, {\n          private: false\n        }).then(r1 => r1.json()).catch(e => Promise.reject(e));\n        let p2 = deleteAccessModifierOfDocument(document.id, 'r').then(resp => resp.status === 200 ? Promise.resolve(true) : Promise.reject(resp.status));\n        return Promise.all([p1, p2]).then(([updatedDocument, accessGroup]) => {\n          putDocumentToAnotherList(oldPrivacy, newPrivacy, updatedDocument.doc);\n          changeActiveChip(oldPrivacy);\n          return Promise.resolve(updatedDocument.doc);\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      }\n    } else if (newPrivacy === privacyOptions.SHARED) {\n      if (oldPrivacy !== privacyOptions.SHARED) {\n        // public/private -> shared\n        // create accessGroup\n        let p1 = DocumentService.updateDocumentPrivacy(document.id, {\n          private: true\n        }).then(r1 => r1.json()).catch(e => Promise.reject(e));\n        let p2 = AccessGroupService.createAccessGroup(accessGroupObject.accessGroup).then(r2 => r2.json()).catch(e => Promise.reject(e));\n        return Promise.all([p1, p2]).then(([updatedDocument, accessGroup]) => {\n          putDocumentToAnotherList(oldPrivacy, newPrivacy, updatedDocument.doc);\n          changeActiveChip(oldPrivacy);\n          return Promise.resolve(updatedDocument.doc);\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      } else {\n        // shared -> shared (user addition or deletion)\n        let p1, p2;\n\n        if (accessGroupObject.addedUsers.userIds.length > 0) {\n          // add users to exist access group\n          p1 = AccessGroupService.addUsersToAccessGroup(document.id, accessGroupObject.accessGroup.modifier, accessGroupObject.addedUsers).then(resp => resp.text()).catch(e => Promise.reject(e));\n        }\n\n        if (accessGroupObject.deletedUsers.userIds.length > 0) {// delete user api\n        }\n\n        return Promise.all([p1, p2]).then(([addedUserResult, deletedUserResult]) => {\n          return Promise.resolve(true);\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      }\n    } else if (newPrivacy === privacyOptions.PRIVATE) {\n      if (oldPrivacy === privacyOptions.SHARED) {\n        // shared -> private\n        return deleteAccessModifierOfDocument(document.id, 'r') //then(resp => resp.status === 200 ? Promise.resolve(true) : Promise.reject(resp.status));\n        .then(resp => {\n          if (resp.status === 200) {\n            putDocumentToAnotherList(oldPrivacy, newPrivacy, document);\n            changeActiveChip(oldPrivacy);\n            return Promise.resolve(true);\n          } else {\n            Promise.reject(resp.status);\n          }\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      } else {\n        // public -> private\n        return DocumentService.updateDocumentPrivacy(document.id, {\n          private: true\n        }).then(resp => resp.json()).then(data => {\n          putDocumentToAnotherList(oldPrivacy, newPrivacy, data.doc);\n          changeActiveChip(oldPrivacy);\n          return Promise.resolve(data.doc);\n        }).catch(e => {\n          console.log(e);\n          return Promise.reject(null);\n        });\n      }\n    } else {\n      return Promise.reject(null);\n    }\n  };\n\n  useEffect(() => {\n    DocumentService.getDocument().then(resp => resp.json()).then(data => {\n      data.docs.forEach(doc => {\n        if (doc.privacy === privacyOptions.PRIVATE) {\n          privateDocumentList.push(doc);\n        } else if (doc.privacy === privacyOptions.SHARED) {\n          sharedDocumentList.push(doc);\n        } else if (doc.privacy === privacyOptions.PUBLIC) {\n          publicDocumentList.push(doc);\n        }\n      });\n      setActiveDocumentList(privateDocumentList);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(DocumentListToolbar, {\n    selectActiveChip: changeActiveChip,\n    privacyOptions: privacyOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(DocumentListTable, {\n    activeDocumentList: activeDocumentList,\n    activePrivacy: activeChip,\n    privacyOptions: privacyOptions,\n    shareFunction: shareDocumentToNew,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })));\n};\n\nexport default MyDocumentList;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/views/MyDocumentList/MyDocumentList.js"],"names":["React","useEffect","useState","makeStyles","DocumentListTable","DocumentListToolbar","DocumentService","AccessGroupService","useStyles","theme","root","padding","spacing","content","marginTop","MyDocumentList","classes","privacyOptions","PUBLIC","PRIVATE","SHARED","activeChip","setActiveChip","privateDocumentList","publicDocumentList","sharedDocumentList","activeDocumentList","setActiveDocumentList","documentListMap","changeActiveChip","myActiveChip","putDocumentToAnotherList","oldPrivacy","newPrivacy","document","oldList","newList","oldIndex","findIndex","doc","id","splice","push","deleteAccessModifierOfDocument","documentId","modifier","deleteDocumentAccessGroupModifier","shareDocumentToNew","accessGroupObject","body","private","updateDocumentPrivacy","then","resp","json","data","Promise","resolve","catch","e","console","log","reject","p1","r1","p2","status","all","updatedDocument","accessGroup","createAccessGroup","r2","addedUsers","userIds","length","addUsersToAccessGroup","text","deletedUsers","addedUserResult","deletedUserResult","getDocument","docs","forEach","privacy"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport { DocumentListTable, DocumentListToolbar } from './components';\r\nimport { DocumentService, AccessGroupService } from 'service';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    content: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst MyDocumentList = () => {\r\n    const classes = useStyles();\r\n    const privacyOptions = { PUBLIC: 'public', PRIVATE: 'private', SHARED: 'shared' };\r\n\r\n    const [activeChip, setActiveChip] = useState(privacyOptions.PRIVATE);\r\n    const [privateDocumentList] = React.useState([]);\r\n    const [publicDocumentList] = React.useState([]);\r\n    const [sharedDocumentList] = React.useState([]);\r\n    const [activeDocumentList, setActiveDocumentList] = React.useState([]);\r\n    const [documentListMap] = React.useState({'public': publicDocumentList, 'private': privateDocumentList, 'shared': sharedDocumentList});\r\n    const changeActiveChip = (myActiveChip) => {\r\n        setActiveChip(myActiveChip);\r\n        if (myActiveChip == privacyOptions.PRIVATE) {\r\n            setActiveDocumentList(privateDocumentList);\r\n        } else if (myActiveChip == privacyOptions.SHARED) {\r\n            setActiveDocumentList(sharedDocumentList);\r\n        } else if (myActiveChip == privacyOptions.PUBLIC) {\r\n            setActiveDocumentList(publicDocumentList);\r\n        }\r\n    };\r\n\r\n    const putDocumentToAnotherList = (oldPrivacy, newPrivacy, document) => {\r\n        let oldList = documentListMap[oldPrivacy];\r\n        let newList = documentListMap[newPrivacy];\r\n        let oldIndex = oldList.findIndex(doc => doc.id === document.id);\r\n        oldList.splice(oldIndex, 1);\r\n        newList.push(document);\r\n    }\r\n\r\n    const deleteAccessModifierOfDocument = (documentId, modifier) => {\r\n        return AccessGroupService.deleteDocumentAccessGroupModifier(documentId, modifier);\r\n    }\r\n\r\n    const shareDocumentToNew = (oldPrivacy, newPrivacy, document, accessGroupObject) => {\r\n        if(newPrivacy === privacyOptions.PUBLIC ) {\r\n            if(oldPrivacy === privacyOptions.PRIVATE) { // private -> public\r\n                const body = {private: false};\r\n                return DocumentService.updateDocumentPrivacy(document.id, body)\r\n                    .then(resp => resp.json())\r\n                    .then(data => {\r\n                        putDocumentToAnotherList(oldPrivacy, newPrivacy, data.doc)\r\n                        changeActiveChip(oldPrivacy);\r\n                        return Promise.resolve(data.doc);\r\n                    })\r\n                    .catch((e) => {\r\n                        console.log(e);\r\n                        return Promise.reject(null);\r\n                    });\r\n            } else { // shared -> public\r\n                let p1 = DocumentService.updateDocumentPrivacy(document.id, {private:false}).then(r1 => r1.json()).catch(e => Promise.reject(e));\r\n                let p2 = deleteAccessModifierOfDocument(document.id, 'r').then(resp => resp.status === 200 ? Promise.resolve(true) : Promise.reject(resp.status));\r\n                return Promise.all([p1,p2])\r\n                .then(([updatedDocument, accessGroup]) => {\r\n                    putDocumentToAnotherList(oldPrivacy, newPrivacy, updatedDocument.doc)\r\n                    changeActiveChip(oldPrivacy)\r\n                    return Promise.resolve(updatedDocument.doc);\r\n                })\r\n                .catch((e) => {\r\n                    console.log(e);\r\n                    return Promise.reject(null);\r\n                });\r\n            }\r\n        } else if(newPrivacy === privacyOptions.SHARED) {\r\n            if(oldPrivacy !== privacyOptions.SHARED) { // public/private -> shared\r\n                // create accessGroup\r\n                let p1 = DocumentService.updateDocumentPrivacy(document.id, {private:true}).then(r1 => r1.json()).catch(e => Promise.reject(e));\r\n                let p2 = AccessGroupService.createAccessGroup(accessGroupObject.accessGroup).then(r2 => r2.json()).catch(e => Promise.reject(e));\r\n                return Promise.all([p1,p2])\r\n                .then(([updatedDocument, accessGroup]) => {\r\n                    putDocumentToAnotherList(oldPrivacy, newPrivacy, updatedDocument.doc)\r\n                    changeActiveChip(oldPrivacy)\r\n                    return Promise.resolve(updatedDocument.doc);\r\n                })\r\n                .catch((e) => {\r\n                    console.log(e);\r\n                    return Promise.reject(null);\r\n                });\r\n            } else { // shared -> shared (user addition or deletion)\r\n                let p1,p2;\r\n                if(accessGroupObject.addedUsers.userIds.length > 0) {\r\n                    // add users to exist access group\r\n                    p1 = AccessGroupService.addUsersToAccessGroup(document.id, accessGroupObject.accessGroup.modifier, accessGroupObject.addedUsers)\r\n                            .then(resp => resp.text())\r\n                            .catch((e) => Promise.reject(e));\r\n                }\r\n                if(accessGroupObject.deletedUsers.userIds.length > 0) {\r\n                    // delete user api\r\n                }\r\n                return Promise.all([p1, p2])\r\n                .then(([addedUserResult, deletedUserResult]) => {\r\n                    return Promise.resolve(true);\r\n                })\r\n                .catch((e) => {\r\n                    console.log(e);\r\n                    return Promise.reject(null);\r\n                });\r\n            }\r\n        } else if(newPrivacy === privacyOptions.PRIVATE) {\r\n            if(oldPrivacy === privacyOptions.SHARED) { // shared -> private\r\n                return deleteAccessModifierOfDocument(document.id, 'r') //then(resp => resp.status === 200 ? Promise.resolve(true) : Promise.reject(resp.status));\r\n                    .then(resp => {\r\n                        if(resp.status === 200) {\r\n                            putDocumentToAnotherList(oldPrivacy, newPrivacy, document)\r\n                            changeActiveChip(oldPrivacy);\r\n                            return Promise.resolve(true)\r\n                        } else {\r\n                            Promise.reject(resp.status)\r\n                        }\r\n                    })\r\n                    .catch((e) => {\r\n                        console.log(e);\r\n                        return Promise.reject(null);\r\n                    });\r\n            } else { // public -> private\r\n                return DocumentService.updateDocumentPrivacy(document.id, {private:true})\r\n                    .then(resp => resp.json())\r\n                    .then(data => {\r\n                        putDocumentToAnotherList(oldPrivacy, newPrivacy, data.doc)\r\n                        changeActiveChip(oldPrivacy);\r\n                        return Promise.resolve(data.doc);\r\n                    })\r\n                    .catch((e) => {\r\n                        console.log(e);\r\n                        return Promise.reject(null);\r\n                    });\r\n            }\r\n        } else {\r\n            return Promise.reject(null);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        DocumentService.getDocument()\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                data.docs.forEach(doc => {\r\n                        if (doc.privacy === privacyOptions.PRIVATE) {\r\n                            privateDocumentList.push(doc);\r\n                        } else if (doc.privacy === privacyOptions.SHARED) {\r\n                            sharedDocumentList.push(doc);\r\n                        } else if (doc.privacy === privacyOptions.PUBLIC) {\r\n                            publicDocumentList.push(doc);\r\n                        }\r\n                    }\r\n                );\r\n                setActiveDocumentList(privateDocumentList);\r\n            }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <DocumentListToolbar selectActiveChip={changeActiveChip} privacyOptions={privacyOptions}/>\r\n            <div className={classes.content}>\r\n                <DocumentListTable activeDocumentList={activeDocumentList} activePrivacy={activeChip} privacyOptions={privacyOptions} shareFunction={shareDocumentToNew}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyDocumentList;\r\n"]},"metadata":{},"sourceType":"module"}