{"ast":null,"code":"'use strict';\n\nimport HttpService from './HttpService';\nimport Util from './Util';\nconst baseURL = process.env.REACT_APP_BACKEND_API_URL + '/kloudless';\n\nconst getFileFromKloudless = (account, file) => HttpService.get(baseURL + '/' + account + '/' + file);\n\nconst getFileFromKloudlessAndStore = (account, file) => getFileFromKloudless(account, file).then(resp => {\n  if (resp.status === 200) {\n    clearStorage();\n    const name = Util.getRandomString();\n    return resp.text().then(json => {\n      if (storeContent(name, json)) {\n        return Promise.resolve(name);\n      } else {\n        return Promise.reject('Save failed. Content to large?');\n      }\n    });\n  } else {\n    return Promise.reject('Status code was ' + resp.status);\n  }\n});\n\nconst storeContent = (name, content) => {\n  try {\n    sessionStorage.setItem(name, content);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getContent = name => sessionStorage.getItem(name);\n\nconst clearStorage = () => {\n  sessionStorage.clear();\n};\n\nexport default {\n  getFileFromKloudlessAndStore,\n  getContent\n};","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/KloudlessService.js"],"names":["HttpService","Util","baseURL","process","env","REACT_APP_BACKEND_API_URL","getFileFromKloudless","account","file","get","getFileFromKloudlessAndStore","then","resp","status","clearStorage","name","getRandomString","text","json","storeContent","Promise","resolve","reject","content","sessionStorage","setItem","e","getContent","getItem","clear"],"mappings":"AAAA;;AAEA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAZ,GAAwC,YAAxD;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,OAAD,EAAUC,IAAV,KACzBR,WAAW,CAACS,GAAZ,CAAgBP,OAAO,GAAG,GAAV,GAAgBK,OAAhB,GAA0B,GAA1B,GAAgCC,IAAhD,CADJ;;AAGA,MAAME,4BAA4B,GAAG,CAACH,OAAD,EAAUC,IAAV,KACjCF,oBAAoB,CAACC,OAAD,EAAUC,IAAV,CAApB,CACKG,IADL,CACUC,IAAI,IAAI;AACV,MAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBC,IAAAA,YAAY;AACZ,UAAMC,IAAI,GAAGd,IAAI,CAACe,eAAL,EAAb;AAEA,WAAOJ,IAAI,CAACK,IAAL,GAAYN,IAAZ,CAAiBO,IAAI,IAAI;AAE5B,UAAIC,YAAY,CAACJ,IAAD,EAAOG,IAAP,CAAhB,EAA8B;AAC1B,eAAOE,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAP;AACH,OAFD,MAEO;AACH,eAAOK,OAAO,CAACE,MAAR,CAAe,gCAAf,CAAP;AACH;AACJ,KAPM,CAAP;AAQH,GAZD,MAYO;AACH,WAAOF,OAAO,CAACE,MAAR,CAAe,qBAAqBV,IAAI,CAACC,MAAzC,CAAP;AACH;AACJ,CAjBL,CADJ;;AAoBA,MAAMM,YAAY,GAAG,CAACJ,IAAD,EAAOQ,OAAP,KAAmB;AACpC,MAAI;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuBV,IAAvB,EAA6BQ,OAA7B;AACA,WAAO,IAAP;AACH,GAHD,CAGE,OAAOG,CAAP,EAAU;AACR,WAAO,KAAP;AACH;AACJ,CAPD;;AASA,MAAMC,UAAU,GAAIZ,IAAD,IAAUS,cAAc,CAACI,OAAf,CAAuBb,IAAvB,CAA7B;;AAEA,MAAMD,YAAY,GAAG,MAAM;AACvBU,EAAAA,cAAc,CAACK,KAAf;AACH,CAFD;;AAKA,eAAe;AACXnB,EAAAA,4BADW;AAEXiB,EAAAA;AAFW,CAAf","sourcesContent":["'use strict';\r\n\r\nimport HttpService from './HttpService';\r\n\r\nimport Util from './Util';\r\n\r\nconst baseURL = process.env.REACT_APP_BACKEND_API_URL + '/kloudless';\r\n\r\nconst getFileFromKloudless = (account, file) =>\r\n    HttpService.get(baseURL + '/' + account + '/' + file);\r\n\r\nconst getFileFromKloudlessAndStore = (account, file) =>\r\n    getFileFromKloudless(account, file)\r\n        .then(resp => {\r\n            if (resp.status === 200) {\r\n                clearStorage();\r\n                const name = Util.getRandomString();\r\n\r\n                return resp.text().then(json => {\r\n\r\n                    if (storeContent(name, json)) {\r\n                        return Promise.resolve(name);\r\n                    } else {\r\n                        return Promise.reject('Save failed. Content to large?');\r\n                    }\r\n                });\r\n            } else {\r\n                return Promise.reject('Status code was ' + resp.status);\r\n            }\r\n        });\r\n\r\nconst storeContent = (name, content) => {\r\n    try {\r\n        sessionStorage.setItem(name, content);\r\n        return true;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst getContent = (name) => sessionStorage.getItem(name);\r\n\r\nconst clearStorage = () => {\r\n    sessionStorage.clear();\r\n};\r\n\r\n\r\nexport default {\r\n    getFileFromKloudlessAndStore,\r\n    getContent\r\n};\r\n"]},"metadata":{},"sourceType":"module"}