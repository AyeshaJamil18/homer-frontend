{"ast":null,"code":"import DeleteAnonymizationService from './AnonymizationImplementation/DeleteAnonymizationService';\nimport GeneralizationAnonymizationService from './AnonymizationImplementation/GeneralizationAnonymizationService';\nimport HashAnonymizationService from './AnonymizationImplementation/HashAnonymizationService';\nimport MaskAnonymizationService from './AnonymizationImplementation/MaskAnonymizationService';\nimport RandomAnonymizationService from './AnonymizationImplementation/RandomAnonymizationService';\nimport AbstractAnonymizationService from './AbstractAnonymizationService';\n/**\r\n * Returns a implementation for a String.\r\n * Example: \"hash\" -> HashAnonymizationService\r\n */\n\nclass AnonymizationFactoryService {\n  static getServiceForName(name) {\n    if (name === DeleteAnonymizationService.getName()) {\n      return DeleteAnonymizationService;\n    }\n\n    if (name === GeneralizationAnonymizationService.getName()) {\n      return GeneralizationAnonymizationService;\n    }\n\n    if (name === HashAnonymizationService.getName()) {\n      return HashAnonymizationService;\n    }\n\n    if (name === MaskAnonymizationService.getName()) {\n      return MaskAnonymizationService;\n    }\n\n    if (name === RandomAnonymizationService.getName()) {\n      return RandomAnonymizationService;\n    } // Default case\n\n\n    throw Error('Anonymization service ' + name + ' does not exist');\n  }\n\n}\n\nexport default AnonymizationFactoryService;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/Anonymization/AnonymizationFactoryService.js"],"names":["DeleteAnonymizationService","GeneralizationAnonymizationService","HashAnonymizationService","MaskAnonymizationService","RandomAnonymizationService","AbstractAnonymizationService","AnonymizationFactoryService","getServiceForName","name","getName","Error"],"mappings":"AAAA,OAAOA,0BAAP,MAAuC,0DAAvC;AACA,OAAOC,kCAAP,MAA+C,kEAA/C;AACA,OAAOC,wBAAP,MAAqC,wDAArC;AACA,OAAOC,wBAAP,MAAqC,wDAArC;AACA,OAAOC,0BAAP,MAAuC,0DAAvC;AACA,OAAOC,4BAAP,MAAyC,gCAAzC;AAEA;;;;;AAIA,MAAMC,2BAAN,CAAkC;AAC9B,SAAOC,iBAAP,CAAyBC,IAAzB,EAAqE;AACjE,QAAIA,IAAI,KAAKR,0BAA0B,CAACS,OAA3B,EAAb,EAAmD;AAC/C,aAAOT,0BAAP;AACH;;AAED,QAAIQ,IAAI,KAAKP,kCAAkC,CAACQ,OAAnC,EAAb,EAA2D;AACvD,aAAOR,kCAAP;AACH;;AAED,QAAIO,IAAI,KAAKN,wBAAwB,CAACO,OAAzB,EAAb,EAAiD;AAC7C,aAAOP,wBAAP;AACH;;AAED,QAAIM,IAAI,KAAKL,wBAAwB,CAACM,OAAzB,EAAb,EAAiD;AAC7C,aAAON,wBAAP;AACH;;AAED,QAAIK,IAAI,KAAKJ,0BAA0B,CAACK,OAA3B,EAAb,EAAmD;AAC/C,aAAOL,0BAAP;AACH,KAnBgE,CAqBjE;;;AACA,UAAMM,KAAK,CAAC,2BAA2BF,IAA3B,GAAkC,iBAAnC,CAAX;AACH;;AAxB6B;;AA2BlC,eAAeF,2BAAf","sourcesContent":["import DeleteAnonymizationService from './AnonymizationImplementation/DeleteAnonymizationService';\r\nimport GeneralizationAnonymizationService from './AnonymizationImplementation/GeneralizationAnonymizationService';\r\nimport HashAnonymizationService from './AnonymizationImplementation/HashAnonymizationService';\r\nimport MaskAnonymizationService from './AnonymizationImplementation/MaskAnonymizationService';\r\nimport RandomAnonymizationService from './AnonymizationImplementation/RandomAnonymizationService';\r\nimport AbstractAnonymizationService from './AbstractAnonymizationService';\r\n\r\n/**\r\n * Returns a implementation for a String.\r\n * Example: \"hash\" -> HashAnonymizationService\r\n */\r\nclass AnonymizationFactoryService {\r\n    static getServiceForName(name: String): AbstractAnonymizationService {\r\n        if (name === DeleteAnonymizationService.getName()) {\r\n            return DeleteAnonymizationService;\r\n        }\r\n\r\n        if (name === GeneralizationAnonymizationService.getName()) {\r\n            return GeneralizationAnonymizationService;\r\n        }\r\n\r\n        if (name === HashAnonymizationService.getName()) {\r\n            return HashAnonymizationService;\r\n        }\r\n\r\n        if (name === MaskAnonymizationService.getName()) {\r\n            return MaskAnonymizationService;\r\n        }\r\n\r\n        if (name === RandomAnonymizationService.getName()) {\r\n            return RandomAnonymizationService;\r\n        }\r\n\r\n        // Default case\r\n        throw Error('Anonymization service ' + name + ' does not exist');\r\n    }\r\n}\r\n\r\nexport default AnonymizationFactoryService;\r\n"]},"metadata":{},"sourceType":"module"}