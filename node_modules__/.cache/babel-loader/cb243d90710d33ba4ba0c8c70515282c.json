{"ast":null,"code":"import AbstractAnonymizationService from '../AbstractAnonymizationService';\nimport AnonymizationAssignment from '../AnonymizationAssignment';\n/**\r\n * Masks a given column with a recurring char patterns from left or right with a given size\r\n * Example:\r\n * Options: (pattern: 'ab',start: 'l', range: 3)\r\n * Input: 3252353\r\n * Output: aba2353\r\n * */\n\nclass MaskAnonymizationService extends AbstractAnonymizationService {}\n\nMaskAnonymizationService.apply = (assignment, document) => {\n  const options = assignment.options;\n  const start = options['start']; // example: l or r\n\n  const pattern = options['pattern']; // example: abc\n\n  const range = options['range']; // example: 4 -> abca\n  // Check if parameter are usable. Start is from right as default\n  // This would else crash the service\n\n  if (!pattern || pattern === '' || !range || range === '') {\n    return;\n  }\n\n  const columnId = AbstractAnonymizationService.getColumnIdByOrderId.call(MaskAnonymizationService, assignment.columnOrderId, document); // Calculate pattern lengths\n\n  const lengthPattern = pattern.length;\n  const repeat = Math.floor(range / lengthPattern);\n  const LeftRepeat = range % lengthPattern; // Calculate static pattern\n\n  const maskedSentence = pattern.repeat(repeat) + pattern.substring(0, LeftRepeat); // apply pattern\n\n  for (let i = 0; i < document.data[columnId].data.length; i++) {\n    if (start === 'Left') {\n      const stringToKeep = document.data[columnId].data[i].substring(range);\n      document.data[columnId].data[i] = maskedSentence + stringToKeep;\n    } else {\n      const stringToKeep = document.data[columnId].data[i].substr(0, document.data[columnId].data[i].length - range);\n      document.data[columnId].data[i] = stringToKeep + maskedSentence;\n    }\n  }\n};\n\nMaskAnonymizationService.getDescription = options => 'masked from ' + options['start'] + ' with pattern ' + options['pattern'] + ' and range ' + options['range'];\n\nMaskAnonymizationService.getName = () => 'mask';\n\nexport default MaskAnonymizationService;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/Anonymization/AnonymizationImplementation/MaskAnonymizationService.js"],"names":["AbstractAnonymizationService","AnonymizationAssignment","MaskAnonymizationService","apply","assignment","document","options","start","pattern","range","columnId","getColumnIdByOrderId","columnOrderId","lengthPattern","length","repeat","Math","floor","LeftRepeat","maskedSentence","substring","i","data","stringToKeep","substr","getDescription","getName"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AAEA;;;;;;;;AAOA,MAAMC,wBAAN,SAAuCF,4BAAvC,CAAoE;;AAA9DE,wB,CACKC,K,GAAQ,CAACC,UAAD,EAAsCC,QAAtC,KAAyD;AACpE,QAAMC,OAAO,GAAGF,UAAU,CAACE,OAA3B;AACA,QAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB,CAFoE,CAEpC;;AAChC,QAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB,CAHoE,CAGhC;;AACpC,QAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB,CAJoE,CAIpC;AAEhC;AACA;;AACA,MAAI,CAACE,OAAD,IAAYA,OAAO,KAAK,EAAxB,IAA8B,CAACC,KAA/B,IAAwCA,KAAK,KAAK,EAAtD,EAA0D;AACtD;AACH;;AAED,QAAMC,QAAQ,GAbiBV,4BAajB,CAASW,oBAAT,MAbhBT,wBAagB,EAA8BE,UAAU,CAACQ,aAAzC,EAAwDP,QAAxD,CAAd,CAZoE,CAcpE;;AACA,QAAMQ,aAAa,GAAGL,OAAO,CAACM,MAA9B;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAGI,aAAnB,CAAf;AACA,QAAMK,UAAU,GAAIT,KAAK,GAAGI,aAA5B,CAjBoE,CAmBpE;;AACA,QAAMM,cAAc,GAAGX,OAAO,CAACO,MAAR,CAAeA,MAAf,IAAyBP,OAAO,CAACY,SAAR,CAAkB,CAAlB,EAAqBF,UAArB,CAAhD,CApBoE,CAsBpE;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BR,MAAjD,EAAyDO,CAAC,EAA1D,EAA8D;AAC1D,QAAId,KAAK,KAAK,MAAd,EAAsB;AAClB,YAAMgB,YAAY,GAAGlB,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BD,CAA7B,EAAgCD,SAAhC,CAA0CX,KAA1C,CAArB;AACAJ,MAAAA,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BD,CAA7B,IAAkCF,cAAc,GAAGI,YAAnD;AACH,KAHD,MAGO;AACH,YAAMA,YAAY,GAAGlB,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BD,CAA7B,EAChBG,MADgB,CACT,CADS,EACNnB,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BD,CAA7B,EAAgCP,MAAhC,GAAyCL,KADnC,CAArB;AAEAJ,MAAAA,QAAQ,CAACiB,IAAT,CAAcZ,QAAd,EAAwBY,IAAxB,CAA6BD,CAA7B,IAAkCE,YAAY,GAAGJ,cAAjD;AACH;AACJ;AACJ,C;;AAlCCjB,wB,CAoCKuB,c,GAAkBnB,OAAD,IAAqB,iBAAiBA,OAAO,CAAC,OAAD,CAAxB,GACzC,gBADyC,GACtBA,OAAO,CAAC,SAAD,CADe,GACD,aADC,GACeA,OAAO,CAAC,OAAD,C;;AArCjEJ,wB,CAuCKwB,O,GAAU,MAAc,M;;AAGnC,eAAexB,wBAAf","sourcesContent":["import AbstractAnonymizationService from '../AbstractAnonymizationService';\r\nimport AnonymizationAssignment from '../AnonymizationAssignment';\r\n\r\n/**\r\n * Masks a given column with a recurring char patterns from left or right with a given size\r\n * Example:\r\n * Options: (pattern: 'ab',start: 'l', range: 3)\r\n * Input: 3252353\r\n * Output: aba2353\r\n * */\r\nclass MaskAnonymizationService extends AbstractAnonymizationService {\r\n    static apply = (assignment: AnonymizationAssignment, document): void => {\r\n        const options = assignment.options;\r\n        const start = options['start']; // example: l or r\r\n        const pattern = options['pattern']; // example: abc\r\n        const range = options['range']; // example: 4 -> abca\r\n\r\n        // Check if parameter are usable. Start is from right as default\r\n        // This would else crash the service\r\n        if (!pattern || pattern === '' || !range || range === '') {\r\n            return;\r\n        }\r\n\r\n        const columnId = super.getColumnIdByOrderId(assignment.columnOrderId, document);\r\n\r\n        // Calculate pattern lengths\r\n        const lengthPattern = pattern.length;\r\n        const repeat = Math.floor(range / lengthPattern);\r\n        const LeftRepeat = (range % lengthPattern);\r\n\r\n        // Calculate static pattern\r\n        const maskedSentence = pattern.repeat(repeat) + pattern.substring(0, LeftRepeat);\r\n\r\n        // apply pattern\r\n        for (let i = 0; i < document.data[columnId].data.length; i++) {\r\n            if (start === 'Left') {\r\n                const stringToKeep = document.data[columnId].data[i].substring(range);\r\n                document.data[columnId].data[i] = maskedSentence + stringToKeep;\r\n            } else {\r\n                const stringToKeep = document.data[columnId].data[i]\r\n                    .substr(0, document.data[columnId].data[i].length - range);\r\n                document.data[columnId].data[i] = stringToKeep + maskedSentence;\r\n            }\r\n        }\r\n    };\r\n\r\n    static getDescription = (options): String => 'masked from ' + options['start'] +\r\n        ' with pattern ' + options['pattern'] + ' and range ' + options['range'];\r\n\r\n    static getName = (): String => 'mask';\r\n}\r\n\r\nexport default MaskAnonymizationService;\r\n"]},"metadata":{},"sourceType":"module"}