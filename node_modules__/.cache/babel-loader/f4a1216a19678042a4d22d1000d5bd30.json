{"ast":null,"code":"import AbstractAnonymizationService from '../AbstractAnonymizationService';\nimport AnonymizationAssignment from '../AnonymizationAssignment';\n/**\r\n * Masks a given column with a recurring char patterns from left or right with a given size\r\n * Example:\r\n * Options: (pattern: 'ab',start: 'l', range: 3)\r\n * Input: 3252353\r\n * Output: aba2353\r\n * */\n\nclass MaskAnonymizationService extends AbstractAnonymizationService {}\n\nMaskAnonymizationService.apply = (assignment, document) => {\n  const options = assignment.options;\n  const start = options['start']; // example: l or r\n\n  const pattern = options['pattern']; // example: abc\n\n  const range = options['range']; // example: 4 -> abca\n\n  const columnId = AbstractAnonymizationService.getColumnIdByOrderId.call(MaskAnonymizationService, assignment.columnOrderId, document);\n\n  for (let i = 0; i < document.data[columnId].data.length - 1; i++) {\n    let LengthPattern = pattern.length;\n    let repeat = Math.floor(range / LengthPattern);\n    let maskedSentence = pattern.repeat(repeat);\n    let LeftRepeat = range % LengthPattern;\n    let toJoin = pattern.substring(0, LeftRepeat);\n\n    if (start === 'Left') {\n      let stringLeft = document.data[columnId].data[i].substring(range);\n      document.data[columnId].data[i] = maskedSentence + '' + toJoin + '' + stringLeft;\n    } else {\n      let STRING_TO_keep = document.data[columnId].data[i].substr(0, document.data[columnId].data[i].length - range);\n      document.data[columnId].data[i] = STRING_TO_keep + maskedSentence + toJoin;\n    }\n  }\n};\n\nMaskAnonymizationService.getDescription = options => 'masked from ' + options['start'] + ' with pattern ' + options['pattern'] + ' and range ' + options['range'];\n\nMaskAnonymizationService.getName = () => 'mask';\n\nexport default MaskAnonymizationService;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/Anonymization/AnonymizationImplementation/MaskAnonymizationService.js"],"names":["AbstractAnonymizationService","AnonymizationAssignment","MaskAnonymizationService","apply","assignment","document","options","start","pattern","range","columnId","getColumnIdByOrderId","columnOrderId","i","data","length","LengthPattern","repeat","Math","floor","maskedSentence","LeftRepeat","toJoin","substring","stringLeft","STRING_TO_keep","substr","getDescription","getName"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AAEA;;;;;;;;AAOA,MAAMC,wBAAN,SAAuCF,4BAAvC,CAAoE;;AAA9DE,wB,CACKC,K,GAAQ,CAACC,UAAD,EAAsCC,QAAtC,KAAyD;AACpE,QAAMC,OAAO,GAAGF,UAAU,CAACE,OAA3B;AACA,QAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB,CAFoE,CAEpC;;AAChC,QAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB,CAHoE,CAGhC;;AACpC,QAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB,CAJoE,CAIpC;;AAEhC,QAAMI,QAAQ,GAPiBV,4BAOjB,CAASW,oBAAT,MAPhBT,wBAOgB,EAA8BE,UAAU,CAACQ,aAAzC,EAAwDP,QAAxD,CAAd;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA6BC,MAA7B,GAAsC,CAA1D,EAA6DF,CAAC,EAA9D,EAAkE;AAC9D,QAAIG,aAAa,GAAGR,OAAO,CAACO,MAA5B;AACA,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAGO,aAAnB,CAAb;AACA,QAAII,cAAc,GAAGZ,OAAO,CAACS,MAAR,CAAeA,MAAf,CAArB;AACA,QAAII,UAAU,GAAIZ,KAAK,GAAGO,aAA1B;AACA,QAAIM,MAAM,GAAGd,OAAO,CAACe,SAAR,CAAkB,CAAlB,EAAqBF,UAArB,CAAb;;AAEA,QAAId,KAAK,KAAK,MAAd,EAAsB;AAClB,UAAIiB,UAAU,GAAGnB,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA6BD,CAA7B,EAAgCU,SAAhC,CAA0Cd,KAA1C,CAAjB;AACAJ,MAAAA,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA8BD,CAA9B,IAAmCO,cAAc,GAAG,EAAjB,GAAsBE,MAAtB,GAA+B,EAA/B,GAAoCE,UAAvE;AACH,KAHD,MAGO;AACH,UAAIC,cAAc,GAAGpB,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA8BD,CAA9B,EAAiCa,MAAjC,CAAwC,CAAxC,EAA2CrB,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA8BD,CAA9B,EAAiCE,MAAjC,GAA0CN,KAArF,CAArB;AACAJ,MAAAA,QAAQ,CAACS,IAAT,CAAcJ,QAAd,EAAwBI,IAAxB,CAA8BD,CAA9B,IAAmCY,cAAc,GAAGL,cAAjB,GAAkCE,MAArE;AACH;AACJ;AACJ,C;;AAxBCpB,wB,CA0BKyB,c,GAAkBrB,OAAD,IAAqB,iBAAiBA,OAAO,CAAC,OAAD,CAAxB,GACzC,gBADyC,GACtBA,OAAO,CAAC,SAAD,CADe,GACD,aADC,GACeA,OAAO,CAAC,OAAD,C;;AA3BjEJ,wB,CA6BK0B,O,GAAU,MAAc,M;;AAGnC,eAAe1B,wBAAf","sourcesContent":["import AbstractAnonymizationService from '../AbstractAnonymizationService';\r\nimport AnonymizationAssignment from '../AnonymizationAssignment';\r\n\r\n/**\r\n * Masks a given column with a recurring char patterns from left or right with a given size\r\n * Example:\r\n * Options: (pattern: 'ab',start: 'l', range: 3)\r\n * Input: 3252353\r\n * Output: aba2353\r\n * */\r\nclass MaskAnonymizationService extends AbstractAnonymizationService {\r\n    static apply = (assignment: AnonymizationAssignment, document): void => {\r\n        const options = assignment.options;\r\n        const start = options['start']; // example: l or r\r\n        const pattern = options['pattern']; // example: abc\r\n        const range = options['range']; // example: 4 -> abca\r\n\r\n        const columnId = super.getColumnIdByOrderId(assignment.columnOrderId, document);\r\n\r\n        for (let i = 0; i < document.data[columnId].data.length - 1; i++) {\r\n            let LengthPattern = pattern.length;\r\n            let repeat = Math.floor(range / LengthPattern);\r\n            let maskedSentence = pattern.repeat(repeat);\r\n            let LeftRepeat = (range % LengthPattern);\r\n            let toJoin = pattern.substring(0, LeftRepeat);\r\n\r\n            if (start === 'Left') {\r\n                let stringLeft = document.data[columnId].data[i].substring(range);\r\n                document.data[columnId].data [i] = maskedSentence + '' + toJoin + '' + stringLeft;\r\n            } else {\r\n                let STRING_TO_keep = document.data[columnId].data [i].substr(0, document.data[columnId].data [i].length - range);\r\n                document.data[columnId].data [i] = STRING_TO_keep + maskedSentence + toJoin;\r\n            }\r\n        }\r\n    };\r\n\r\n    static getDescription = (options): String => 'masked from ' + options['start'] +\r\n        ' with pattern ' + options['pattern'] + ' and range ' + options['range'];\r\n\r\n    static getName = (): String => 'mask';\r\n}\r\n\r\nexport default MaskAnonymizationService;\r\n"]},"metadata":{},"sourceType":"module"}