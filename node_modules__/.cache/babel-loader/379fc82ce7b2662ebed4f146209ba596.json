{"ast":null,"code":"import AbstractAnonymizationService from '../AbstractAnonymizationService';\nimport AnonymizationAssignment from '../AnonymizationAssignment';\n/**\r\n * Generalizes (e.g. 10 - 20) a given column\r\n */\n\nclass GeneralizationAnonymizationService extends AbstractAnonymizationService {}\n\nGeneralizationAnonymizationService.apply = (assignment, document) => {\n  const options = assignment.options;\n  const stepSize = options['stepSize']; // example: 10 -> 10 - 20\n  // get document column id on which we should work on\n\n  const columnId = AbstractAnonymizationService.getColumnIdByOrderId.call(GeneralizationAnonymizationService, assignment.columnOrderId, document); // Apply on data column\n\n  document.data[columnId].data = document.data[columnId].data.map(cell => {\n    let LowLimit = Math.floor(cell / stepSize);\n    let bucketStart = LowLimit * stepSize;\n    let bucketEnd = bucketStart + parseInt(stepSize);\n    return bucketStart + ' - ' + bucketEnd;\n  });\n};\n\nGeneralizationAnonymizationService.getDescription = options => 'generalized with step size ' + options['stepSize'];\n\nGeneralizationAnonymizationService.getName = () => 'generalization';\n\nexport default GeneralizationAnonymizationService;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/Anonymization/AnonymizationImplementation/GeneralizationAnonymizationService.js"],"names":["AbstractAnonymizationService","AnonymizationAssignment","GeneralizationAnonymizationService","apply","assignment","document","options","stepSize","columnId","getColumnIdByOrderId","columnOrderId","data","map","cell","LowLimit","Math","floor","bucketStart","bucketEnd","parseInt","getDescription","getName"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AAEA;;;;AAGA,MAAMC,kCAAN,SAAiDF,4BAAjD,CAA8E;;AAAxEE,kC,CACKC,K,GAAQ,CAACC,UAAD,EAAsCC,QAAtC,KAAyD;AACpE,QAAMC,OAAO,GAAGF,UAAU,CAACE,OAA3B;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB,CAFoE,CAE9B;AACtC;;AACA,QAAME,QAAQ,GAL2BR,4BAK3B,CAASS,oBAAT,MALhBP,kCAKgB,EAA8BE,UAAU,CAACM,aAAzC,EAAwDL,QAAxD,CAAd,CAJoE,CAKpE;;AACAA,EAAAA,QAAQ,CAACM,IAAT,CAAcH,QAAd,EAAwBG,IAAxB,GAA+BN,QAAQ,CAACM,IAAT,CAAcH,QAAd,EAAwBG,IAAxB,CAA6BC,GAA7B,CAAiCC,IAAI,IAAI;AACpE,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAGN,QAAlB,CAAf;AACA,QAAIU,WAAW,GAAGH,QAAQ,GAAGP,QAA7B;AACA,QAAIW,SAAS,GAAID,WAAD,GAAgBE,QAAQ,CAACZ,QAAD,CAAxC;AACA,WAAOU,WAAW,GAAG,KAAd,GAAsBC,SAA7B;AACH,GAL8B,CAA/B;AAMH,C;;AAbChB,kC,CAcKkB,c,GAAkBd,OAAD,IAAqB,gCAAgCA,OAAO,CAAC,UAAD,C;;AAdlFJ,kC,CAgBKmB,O,GAAU,MAAc,gB;;AAGnC,eAAenB,kCAAf","sourcesContent":["import AbstractAnonymizationService from '../AbstractAnonymizationService';\r\nimport AnonymizationAssignment from '../AnonymizationAssignment';\r\n\r\n/**\r\n * Generalizes (e.g. 10 - 20) a given column\r\n */\r\nclass GeneralizationAnonymizationService extends AbstractAnonymizationService {\r\n    static apply = (assignment: AnonymizationAssignment, document): void => {\r\n        const options = assignment.options;\r\n        const stepSize = options['stepSize']; // example: 10 -> 10 - 20\r\n        // get document column id on which we should work on\r\n        const columnId = super.getColumnIdByOrderId(assignment.columnOrderId, document);\r\n        // Apply on data column\r\n        document.data[columnId].data = document.data[columnId].data.map(cell => {\r\n            let LowLimit = Math.floor(cell / stepSize);\r\n            let bucketStart = LowLimit * stepSize;\r\n            let bucketEnd = (bucketStart) + parseInt(stepSize);\r\n            return bucketStart + ' - ' + bucketEnd;\r\n        });\r\n    };\r\n    static getDescription = (options): String => 'generalized with step size ' + options['stepSize'];\r\n\r\n    static getName = (): String => 'generalization';\r\n}\r\n\r\nexport default GeneralizationAnonymizationService;\r\n"]},"metadata":{},"sourceType":"module"}