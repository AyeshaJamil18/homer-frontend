{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\src\\\\views\\\\Dashboard\\\\components\\\\DisplayValueCard\\\\DisplayValueCard.js\";\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport LoadingSpinner from 'react-loader-spinner';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  content: {\n    alignItems: 'center',\n    display: 'flex'\n  },\n  title: {\n    fontWeight: 700\n  },\n  difference: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center'\n  },\n  differenceIcon: {\n    color: theme.palette.success.dark\n  },\n  differenceValue: {\n    color: theme.palette.success.dark,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst DisplayValueCard = props => {\n  const className = props.className,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const classes = useStyles();\n\n  const _useState = useState(React.createElement(LoadingSpinner, {\n    type: \"ThreeDots\",\n    height: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })),\n        _useState2 = _slicedToArray(_useState, 2),\n        asyncValue = _useState2[0],\n        asyncValueSet = _useState2[1];\n\n  useEffect(() => {\n    if (props.promise) {\n      const fetchData = async () => {\n        await props.promise.then(result => asyncValueSet(result)).catch(error => console.log(error));\n      };\n\n      fetchData();\n    }\n  }, []);\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, props.headtitle), React.createElement(Typography, {\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, asyncValue)), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, props.icon))));\n};\n\nDisplayValueCard.propTypes = {\n  className: PropTypes.string\n};\nexport default DisplayValueCard;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/views/Dashboard/components/DisplayValueCard/DisplayValueCard.js"],"names":["React","useEffect","useState","clsx","PropTypes","makeStyles","Card","CardContent","Grid","Typography","LoadingSpinner","useStyles","theme","root","height","content","alignItems","display","title","fontWeight","difference","marginTop","spacing","differenceIcon","color","palette","success","dark","differenceValue","marginRight","DisplayValueCard","props","className","rest","classes","asyncValue","asyncValueSet","promise","fetchData","then","result","catch","error","console","log","headtitle","icon","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\r\n\r\nimport LoadingSpinner from 'react-loader-spinner';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%'\r\n    },\r\n    content: {\r\n        alignItems: 'center',\r\n        display: 'flex'\r\n    },\r\n    title: {\r\n        fontWeight: 700\r\n    },\r\n    difference: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    differenceIcon: {\r\n        color: theme.palette.success.dark\r\n    },\r\n    differenceValue: {\r\n        color: theme.palette.success.dark,\r\n        marginRight: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst DisplayValueCard = props => {\r\n    const { className, ...rest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [asyncValue, asyncValueSet] =\r\n        useState(<LoadingSpinner type=\"ThreeDots\" height={60}/>);\r\n\r\n    useEffect(() => {\r\n        if (props.promise) {\r\n            const fetchData = async () => {\r\n                await props.promise\r\n                    .then(result => asyncValueSet(result))\r\n                    .catch(error => console.log(error));\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardContent>\r\n                <Grid\r\n                    container\r\n                    justify=\"space-between\"\r\n                >\r\n                    <Grid item>\r\n                        <Typography\r\n                            className={classes.title}\r\n                            color=\"textSecondary\"\r\n                            gutterBottom\r\n                            variant=\"body2\"\r\n                        >{props.headtitle}\r\n                        </Typography>\r\n                        <Typography variant=\"h3\">{asyncValue}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {props.icon}\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nDisplayValueCard.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default DisplayValueCard;\r\n"]},"metadata":{},"sourceType":"module"}