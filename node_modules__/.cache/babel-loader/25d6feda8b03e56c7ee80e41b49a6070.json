{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\Desktop\\\\TUM\\\\semester 3\\\\Final Presentation\\\\dedas-frontend\\\\src\\\\views\\\\SharedDocuments\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, Card, CardActions, CardContent, Checkbox, Grid, Radio, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, TextField, Typography } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1050\n  },\n  nameContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  tableCell: {\n    width: '70%'\n  }\n}));\n\nconst UsersTable = props => {\n  const className = props.className,\n        users = props.users,\n        rest = _objectWithoutProperties(props, [\"className\", \"users\"]);\n\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(10),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        value = _React$useState4[0],\n        setValue = _React$useState4[1];\n\n  const handleSelectAll = event => {\n    const users = props.users;\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user.id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const _React$useState5 = React.useState('public'),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedValue = _React$useState6[0],\n        setSelectedValue = _React$useState6[1];\n\n  const handleRadioChange = event => {\n    setSelectedValue(event.target.value);\n  };\n\n  const handleClickUrl = () => {\n    setValue('https://wwww.dedas.com/documents/id');\n  };\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    className: classes.tableCell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Upload Date\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Privacy\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, users.slice(0, rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user.id,\n    selected: selectedUsers.indexOf(user.id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user.id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user.id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    className: classes.tableCell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, user.name))), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, moment(user.uploadDate).format('DD/MM/YYYY')), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.tableCell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, user.private && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Private\")), !user.private && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Public\"))), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Button // onClick={handleClickOpen}\n  , {\n    onClick: () => alert('it will redirect to the editor :)'),\n    color: \"primary\",\n    variant: \"outlined\",\n    className: classes.importButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Edit\")), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClickOpen // onClick={() => alert('Url will be generated :)')}\n    ,\n    color: \"primary\",\n    variant: \"outlined\",\n    className: classes.importButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"Share\")))))), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Sharing\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"To share this dataset(document.csv) to another user or publicly, please select privacy setting.\"), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Private\"), React.createElement(Radio, {\n    checked: selectedValue === 'private',\n    onChange: handleRadioChange,\n    value: \"private\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'Private'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Public\"), React.createElement(Radio, {\n    checked: selectedValue === 'public',\n    onChange: handleRadioChange,\n    value: \"public\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'Public'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: classes.spacer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  })), selectedValue == 'private' && React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleClickUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"Create URL\"), selectedValue == 'private' && React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    value: value,\n    id: \"name\",\n    label: \"URL Address\",\n    type: \"email\",\n    fullWidth: true,\n    InputProps: {\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \"Cancel\"), selectedValue == 'public' && React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, \"Share\")))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [5, 10, 25],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  })));\n};\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default UsersTable;","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/views/SharedDocuments/components/UsersTable/UsersTable.js"],"names":["React","useState","clsx","PropTypes","moment","PerfectScrollbar","makeStyles","Button","Card","CardActions","CardContent","Checkbox","Grid","Radio","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TextField","Typography","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","useStyles","theme","root","content","padding","inner","minWidth","nameContainer","display","alignItems","avatar","marginRight","spacing","actions","justifyContent","tableCell","width","UsersTable","props","className","users","rest","classes","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","open","setOpen","value","setValue","handleSelectAll","event","target","checked","map","user","id","handleSelectOne","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handleClickOpen","handleClose","handlePageChange","handleRowsPerPageChange","selectedValue","setSelectedValue","handleRadioChange","handleClickUrl","tableRow","name","uploadDate","format","private","alert","importButton","spacer","readOnly","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Checkbox,\r\n    Grid,\r\n    Radio,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    content: {\r\n        padding: 0\r\n    },\r\n    inner: {\r\n        minWidth: 1050\r\n    },\r\n    nameContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    actions: {\r\n        justifyContent: 'flex-end'\r\n    },\r\n    tableCell: {\r\n        width: '70%'\r\n    }\r\n}));\r\n\r\nconst UsersTable = props => {\r\n    const { className, users, ...rest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [page, setPage] = useState(0);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n\r\n    const handleSelectAll = event => {\r\n        const { users } = props;\r\n\r\n        let selectedUsers;\r\n\r\n        if (event.target.checked) {\r\n            selectedUsers = users.map(user => user.id);\r\n        } else {\r\n            selectedUsers = [];\r\n        }\r\n\r\n        setSelectedUsers(selectedUsers);\r\n    };\r\n\r\n    const handleSelectOne = (event, id) => {\r\n        const selectedIndex = selectedUsers.indexOf(id);\r\n        let newSelectedUsers = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\r\n        } else if (selectedIndex === selectedUsers.length - 1) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(\r\n                selectedUsers.slice(0, selectedIndex),\r\n                selectedUsers.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n\r\n        setSelectedUsers(newSelectedUsers);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    };\r\n\r\n    const handleRowsPerPageChange = event => {\r\n        setRowsPerPage(event.target.value);\r\n    };\r\n    const [selectedValue, setSelectedValue] = React.useState('public');\r\n\r\n    const handleRadioChange = (event) => {\r\n        setSelectedValue(event.target.value);\r\n    };\r\n\r\n    const handleClickUrl = () => {\r\n        setValue('https://wwww.dedas.com/documents/id');\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardContent className={classes.content}>\r\n                <PerfectScrollbar>\r\n                    <div className={classes.inner}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox\r\n                                            checked={selectedUsers.length === users.length}\r\n                                            color=\"primary\"\r\n                                            indeterminate={\r\n                                                selectedUsers.length > 0 &&\r\n                                                selectedUsers.length < users.length\r\n                                            }\r\n                                            onChange={handleSelectAll}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.tableCell}>Name</TableCell>\r\n                                    <TableCell align=\"right\">Upload Date</TableCell>\r\n                                    <TableCell align=\"center\">Privacy</TableCell>\r\n                                    <TableCell align=\"right\"></TableCell>\r\n                                    <TableCell align=\"right\"></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {users.slice(0, rowsPerPage).map(user => (\r\n                                    <TableRow\r\n                                        className={classes.tableRow}\r\n                                        hover\r\n                                        key={user.id}\r\n                                        selected={selectedUsers.indexOf(user.id) !== -1}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                checked={selectedUsers.indexOf(user.id) !== -1}\r\n                                                color=\"primary\"\r\n                                                onChange={event => handleSelectOne(event, user.id)}\r\n                                                value=\"true\"\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCell}>\r\n                                            <div className={classes.nameContainer}>\r\n                                                {/* <Avatar\r\n                          className={classes.avatar}\r\n                          src={user.avatarUrl}\r\n                        >\r\n                          {getInitials(user.name)}\r\n                        </Avatar> */}\r\n                                                <Typography variant=\"body1\">{user.name}</Typography>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                        {/* <TableCell>{user.email}</TableCell>\r\n                    <TableCell>\r\n                      {user.address.city}, {user.address.state},{' '}\r\n                      {user.address.country}\r\n                    </TableCell> \r\n                    <TableCell>{user.phone}</TableCell>*/}\r\n                                        <TableCell align=\"right\">\r\n                                            {moment(user.uploadDate).format('DD/MM/YYYY')}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\" className={classes.tableCell}>\r\n                                            {user.private && <div>\r\n                                                <Typography variant=\"body1\">Private</Typography>\r\n                                            </div>}\r\n                                            {!user.private && <div>\r\n                                                <Typography variant=\"body1\">Public</Typography>\r\n                                            </div>}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <Button\r\n                                                // onClick={handleClickOpen}\r\n                                                onClick={() => alert('it will redirect to the editor :)')}\r\n                                                color=\"primary\"\r\n                                                variant=\"outlined\"\r\n                                                className={classes.importButton}>\r\n                                                Edit\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <Button\r\n                                                onClick={handleClickOpen}\r\n                                                // onClick={() => alert('Url will be generated :)')}\r\n                                                color=\"primary\"\r\n                                                variant=\"outlined\"\r\n                                                className={classes.importButton}>\r\n                                                Share\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                            <DialogTitle id=\"form-dialog-title\">Sharing</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    To share this dataset(document.csv) to another user or publicly, please select\r\n                                    privacy setting.\r\n                                </DialogContentText>\r\n                                <Grid>\r\n                                    <label>Private</label>\r\n                                    <Radio\r\n                                        checked={selectedValue === 'private'}\r\n                                        onChange={handleRadioChange}\r\n                                        value=\"private\"\r\n                                        name=\"radio-button-demo\"\r\n                                        inputProps={{ 'aria-label': 'Private' }}\r\n                                    />\r\n                                    <label>Public</label>\r\n                                    <Radio\r\n                                        checked={selectedValue === 'public'}\r\n                                        onChange={handleRadioChange}\r\n                                        value=\"public\"\r\n                                        name=\"radio-button-demo\"\r\n                                        inputProps={{ 'aria-label': 'Public' }}\r\n                                    />\r\n                                    <span className={classes.spacer}/>\r\n                                </Grid>\r\n                                {selectedValue == 'private' && <Button color=\"primary\" onClick={handleClickUrl}>\r\n                                    Create URL\r\n                                </Button>}\r\n                                {selectedValue == 'private' && <TextField\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    value={value}\r\n                                    id=\"name\"\r\n                                    label=\"URL Address\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    InputProps={{\r\n                                        readOnly: true\r\n                                    }}\r\n                                />}\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                {selectedValue == 'public' && <Button onClick={handleClose} color=\"primary\">\r\n                                    Share\r\n                                </Button>}\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </div>\r\n                </PerfectScrollbar>\r\n            </CardContent>\r\n            <CardActions className={classes.actions}>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={users.length}\r\n                    onChangePage={handlePageChange}\r\n                    onChangeRowsPerPage={handleRowsPerPageChange}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                />\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nUsersTable.propTypes = {\r\n    className: PropTypes.string,\r\n    users: PropTypes.array.isRequired\r\n};\r\n\r\nexport default UsersTable;\r\n"]},"metadata":{},"sourceType":"module"}