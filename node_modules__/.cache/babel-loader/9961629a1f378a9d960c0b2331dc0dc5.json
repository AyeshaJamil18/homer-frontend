{"ast":null,"code":"'use strict';\n\nimport HttpService from './HttpService';\nimport AuthService from './AuthService';\nconst baseURL = process.env.REACT_APP_BACKEND_API_URL + '/user';\n\nconst getCurrentUserData = () => {\n  if (AuthService.isBearerTokenStillValid()) {\n    return HttpService.get(baseURL).then(resp => {\n      if (resp.status === 200) {\n        return resp.json().then(json => {\n          return Promise.resolve(json);\n        });\n      } else {\n        return Promise.reject(resp);\n      }\n    });\n  } else {\n    return Promise.reject('User not logged in');\n  }\n};\n\nconst checkUserEmailExist = userEmail => HttpService.get(baseURL + '/checkEmail/' + userEmail);\n\nexport default {\n  getCurrentUserData,\n  checkUserEmailExist\n};","map":{"version":3,"sources":["C:/Users/ayesh/Desktop/TUM/semester 3/Final Presentation/dedas-frontend/src/service/UserService.js"],"names":["HttpService","AuthService","baseURL","process","env","REACT_APP_BACKEND_API_URL","getCurrentUserData","isBearerTokenStillValid","get","then","resp","status","json","Promise","resolve","reject","checkUserEmailExist","userEmail"],"mappings":"AAAA;;AAEA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAZ,GAAwC,OAAxD;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC7B,MAAIL,WAAW,CAACM,uBAAZ,EAAJ,EAA2C;AACvC,WAAOP,WAAW,CAACQ,GAAZ,CAAgBN,OAAhB,EACFO,IADE,CACGC,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrB,eAAOD,IAAI,CAACE,IAAL,GACFH,IADE,CACGG,IAAI,IAAI;AAEV,iBAAOC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAP;AACH,SAJE,CAAP;AAKH,OAND,MAMO;AACH,eAAOC,OAAO,CAACE,MAAR,CAAeL,IAAf,CAAP;AACH;AACJ,KAXE,CAAP;AAYH,GAbD,MAaO;AACH,WAAOG,OAAO,CAACE,MAAR,CAAe,oBAAf,CAAP;AACH;AACJ,CAjBD;;AAmBA,MAAMC,mBAAmB,GAAIC,SAAD,IACxBjB,WAAW,CAACQ,GAAZ,CAAgBN,OAAO,GAAG,cAAV,GAA2Be,SAA3C,CADJ;;AAIA,eAAe;AACXX,EAAAA,kBADW;AAEXU,EAAAA;AAFW,CAAf","sourcesContent":["'use strict';\r\n\r\nimport HttpService from './HttpService';\r\nimport AuthService from './AuthService';\r\n\r\nconst baseURL = process.env.REACT_APP_BACKEND_API_URL + '/user';\r\n\r\nconst getCurrentUserData = () => {\r\n    if (AuthService.isBearerTokenStillValid()) {\r\n        return HttpService.get(baseURL)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json()\r\n                        .then(json => {\r\n\r\n                            return Promise.resolve(json);\r\n                        });\r\n                } else {\r\n                    return Promise.reject(resp);\r\n                }\r\n            });\r\n    } else {\r\n        return Promise.reject('User not logged in');\r\n    }\r\n};\r\n\r\nconst checkUserEmailExist = (userEmail) =>\r\n    HttpService.get(baseURL + '/checkEmail/' + userEmail);\r\n\r\n\r\nexport default {\r\n    getCurrentUserData,\r\n    checkUserEmailExist\r\n};\r\n"]},"metadata":{},"sourceType":"module"}