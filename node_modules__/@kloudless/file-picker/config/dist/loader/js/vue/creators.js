"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.keys");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createSaver = exports.createChooser = void 0;

var _interface = _interopRequireDefault(require("../interface"));

var _DefaultButtons = require("./DefaultButtons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var create = function create(fileExplorerType) {
  return function (customComponent) {
    var isChooser = fileExplorerType === 'chooser';
    var wrappedComponent = customComponent || (isChooser ? _DefaultButtons.ChooserButton : _DefaultButtons.SaverButton);
    var wrappedCompName = wrappedComponent.name || 'component';
    return {
      name: isChooser ? "createChooser-".concat(wrappedCompName) : "createSaver-".concat(wrappedCompName),
      props: _objectSpread({}, wrappedComponent.props, {
        options: {
          type: Object,
          required: true
        }
      }),
      data: function data() {
        return {
          explorer: null
        };
      },
      methods: {
        choose: function choose() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          this.$emit.apply(this, ['click'].concat(args));
          this.explorer.choose();
        },
        save: function save() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          this.$emit.apply(this, ['click'].concat(args));
          this.explorer.save();
        },
        initExplorer: function initExplorer() {
          var _this = this;

          // deep clone options
          var options = JSON.parse(JSON.stringify(this.options));
          this.explorer = _interface.default.explorer(options);
          this.explorer.on('raw', function (_ref) {
            var action = _ref.action,
                data = _ref.data;

            _this.$emit(action, data);
          });
        }
      },
      watch: {
        options: {
          handler: function handler() {
            this.explorer.destroy();
            this.initExplorer();
          },
          deep: true
        }
      },
      render: function render(createElement) {
        var _this$$props = this.$props,
            options = _this$$props.options,
            restProps = _objectWithoutProperties(_this$$props, ["options"]);

        var element = createElement(wrappedComponent, {
          props: restProps,
          attrs: this.$attrs,
          // Listen for native click event if the wrapped component doesn't
          // explicitly emit it.
          nativeOn: {
            click: isChooser ? this.choose : this.save
          },
          // Bind listeners to the wrapped component
          on: _objectSpread({}, this.$listeners, {
            click: isChooser ? this.choose : this.save
          })
        });
        return element;
      },
      mounted: function mounted() {
        this.initExplorer();
      },
      destroyed: function destroyed() {
        this.explorer.destroy();
      }
    };
  };
};

var createChooser = create('chooser');
exports.createChooser = createChooser;
var createSaver = create('saver');
exports.createSaver = createSaver;
var _default = {
  createChooser: createChooser,
  createSaver: createSaver
};
exports.default = _default;